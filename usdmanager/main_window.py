# -*- coding: utf-8 -*-

################################################################################
## Form generated from reading UI file 'main_window.ui'
##
## Created by: Qt User Interface Compiler version 5.15.2
##
## WARNING! All changes made in this file will be lost when recompiling UI file!
################################################################################

from PySide2.QtCore import *
from PySide2.QtGui import *
from PySide2.QtWidgets import *

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        if not MainWindow.objectName():
            MainWindow.setObjectName(u"MainWindow")
        MainWindow.resize(910, 555)
        icon = QIcon()
        icon.addFile(u":/images/images/logo.png", QSize(), QIcon.Normal, QIcon.Off)
        MainWindow.setWindowIcon(icon)
        self.aboutAction = QAction(MainWindow)
        self.aboutAction.setObjectName(u"aboutAction")
        icon1 = QIcon(QIcon.fromTheme(u"help-about"))
        self.aboutAction.setIcon(icon1)
        self.aboutAction.setMenuRole(QAction.AboutRole)
        self.exitAction = QAction(MainWindow)
        self.exitAction.setObjectName(u"exitAction")
        icon2 = QIcon(QIcon.fromTheme(u"application-exit"))
        self.exitAction.setIcon(icon2)
        self.exitAction.setMenuRole(QAction.QuitRole)
        self.documentationAction = QAction(MainWindow)
        self.documentationAction.setObjectName(u"documentationAction")
        icon3 = QIcon(QIcon.fromTheme(u"help-browser"))
        self.documentationAction.setIcon(icon3)
        self.actionBack = QAction(MainWindow)
        self.actionBack.setObjectName(u"actionBack")
        self.actionBack.setEnabled(False)
        icon4 = QIcon(QIcon.fromTheme(u"go-previous"))
        self.actionBack.setIcon(icon4)
        self.actionForward = QAction(MainWindow)
        self.actionForward.setObjectName(u"actionForward")
        self.actionForward.setEnabled(False)
        icon5 = QIcon(QIcon.fromTheme(u"go-next"))
        self.actionForward.setIcon(icon5)
        self.actionOpen = QAction(MainWindow)
        self.actionOpen.setObjectName(u"actionOpen")
        icon6 = QIcon(QIcon.fromTheme(u"document-open"))
        self.actionOpen.setIcon(icon6)
        self.actionEdit = QAction(MainWindow)
        self.actionEdit.setObjectName(u"actionEdit")
        icon7 = QIcon(QIcon.fromTheme(u"accessories-text-editor"))
        self.actionEdit.setIcon(icon7)
        self.actionCloseTab = QAction(MainWindow)
        self.actionCloseTab.setObjectName(u"actionCloseTab")
        self.actionFind = QAction(MainWindow)
        self.actionFind.setObjectName(u"actionFind")
        icon8 = QIcon(QIcon.fromTheme(u"edit-find"))
        self.actionFind.setIcon(icon8)
        self.actionFindPrev = QAction(MainWindow)
        self.actionFindPrev.setObjectName(u"actionFindPrev")
        self.actionFindPrev.setEnabled(False)
        icon9 = QIcon()
        icon9.addFile(u":/images/images/findPrev.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionFindPrev.setIcon(icon9)
        self.actionFindNext = QAction(MainWindow)
        self.actionFindNext.setObjectName(u"actionFindNext")
        self.actionFindNext.setEnabled(False)
        icon10 = QIcon()
        icon10.addFile(u":/images/images/findNext.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionFindNext.setIcon(icon10)
        self.actionOpen_files_in_new_tabs = QAction(MainWindow)
        self.actionOpen_files_in_new_tabs.setObjectName(u"actionOpen_files_in_new_tabs")
        self.actionOpen_files_in_new_tabs.setCheckable(True)
        self.actionNewTab = QAction(MainWindow)
        self.actionNewTab.setObjectName(u"actionNewTab")
        icon11 = QIcon(QIcon.fromTheme(u"tab-new"))
        self.actionNewTab.setIcon(icon11)
        self.actionSave = QAction(MainWindow)
        self.actionSave.setObjectName(u"actionSave")
        icon12 = QIcon(QIcon.fromTheme(u"document-save"))
        self.actionSave.setIcon(icon12)
        self.actionSaveAs = QAction(MainWindow)
        self.actionSaveAs.setObjectName(u"actionSaveAs")
        icon13 = QIcon(QIcon.fromTheme(u"document-save-as"))
        self.actionSaveAs.setIcon(icon13)
        self.actionDiffFile = QAction(MainWindow)
        self.actionDiffFile.setObjectName(u"actionDiffFile")
        self.actionDiffFile.setEnabled(False)
        self.actionUndo = QAction(MainWindow)
        self.actionUndo.setObjectName(u"actionUndo")
        self.actionUndo.setEnabled(False)
        icon14 = QIcon(QIcon.fromTheme(u"edit-undo"))
        self.actionUndo.setIcon(icon14)
        self.actionRedo = QAction(MainWindow)
        self.actionRedo.setObjectName(u"actionRedo")
        self.actionRedo.setEnabled(False)
        icon15 = QIcon(QIcon.fromTheme(u"edit-redo"))
        self.actionRedo.setIcon(icon15)
        self.actionCut = QAction(MainWindow)
        self.actionCut.setObjectName(u"actionCut")
        self.actionCut.setEnabled(False)
        icon16 = QIcon(QIcon.fromTheme(u"edit-cut"))
        self.actionCut.setIcon(icon16)
        self.actionCopy = QAction(MainWindow)
        self.actionCopy.setObjectName(u"actionCopy")
        self.actionCopy.setEnabled(False)
        icon17 = QIcon(QIcon.fromTheme(u"edit-copy"))
        self.actionCopy.setIcon(icon17)
        self.actionPaste = QAction(MainWindow)
        self.actionPaste.setObjectName(u"actionPaste")
        self.actionPaste.setEnabled(False)
        icon18 = QIcon(QIcon.fromTheme(u"edit-paste"))
        self.actionPaste.setIcon(icon18)
        self.actionSelectAll = QAction(MainWindow)
        self.actionSelectAll.setObjectName(u"actionSelectAll")
        self.actionSelectAll.setEnabled(False)
        icon19 = QIcon(QIcon.fromTheme(u"edit-select-all"))
        self.actionSelectAll.setIcon(icon19)
        self.actionIncludePanel = QAction(MainWindow)
        self.actionIncludePanel.setObjectName(u"actionIncludePanel")
        self.actionIncludePanel.setCheckable(True)
        self.actionIncludePanel.setChecked(True)
        self.actionRefresh = QAction(MainWindow)
        self.actionRefresh.setObjectName(u"actionRefresh")
        self.actionRefresh.setEnabled(False)
        icon20 = QIcon(QIcon.fromTheme(u"view-refresh"))
        self.actionRefresh.setIcon(icon20)
        self.actionZoomIn = QAction(MainWindow)
        self.actionZoomIn.setObjectName(u"actionZoomIn")
        icon21 = QIcon(QIcon.fromTheme(u"zoom-in"))
        self.actionZoomIn.setIcon(icon21)
        self.actionZoomOut = QAction(MainWindow)
        self.actionZoomOut.setObjectName(u"actionZoomOut")
        icon22 = QIcon(QIcon.fromTheme(u"zoom-out"))
        self.actionZoomOut.setIcon(icon22)
        self.actionNormalSize = QAction(MainWindow)
        self.actionNormalSize.setObjectName(u"actionNormalSize")
        icon23 = QIcon(QIcon.fromTheme(u"zoom-original"))
        self.actionNormalSize.setIcon(icon23)
        self.actionPreferences_NewTab = QAction(MainWindow)
        self.actionPreferences_NewTab.setObjectName(u"actionPreferences_NewTab")
        self.actionPreferences_NewTab.setCheckable(True)
        self.actionUsdView = QAction(MainWindow)
        self.actionUsdView.setObjectName(u"actionUsdView")
        self.actionUsdView.setEnabled(False)
        icon24 = QIcon()
        icon24.addFile(u":/images/images/usd.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionUsdView.setIcon(icon24)
        self.actionTextEditor = QAction(MainWindow)
        self.actionTextEditor.setObjectName(u"actionTextEditor")
        self.actionTextEditor.setEnabled(False)
        self.actionTextEditor.setIcon(icon7)
        self.aboutQtAction = QAction(MainWindow)
        self.aboutQtAction.setObjectName(u"aboutQtAction")
        self.aboutQtAction.setMenuRole(QAction.AboutQtRole)
        self.actionBrowse = QAction(MainWindow)
        self.actionBrowse.setObjectName(u"actionBrowse")
        icon25 = QIcon(QIcon.fromTheme(u"applications-internet"))
        self.actionBrowse.setIcon(icon25)
        self.actionPreferences_SyntaxHighlighting = QAction(MainWindow)
        self.actionPreferences_SyntaxHighlighting.setObjectName(u"actionPreferences_SyntaxHighlighting")
        self.actionPreferences_SyntaxHighlighting.setCheckable(True)
        self.actionPreferences_SyntaxHighlighting.setChecked(True)
        self.actionStandard_Toolbar = QAction(MainWindow)
        self.actionStandard_Toolbar.setObjectName(u"actionStandard_Toolbar")
        self.actionStandard_Toolbar.setCheckable(True)
        self.actionStandard_Toolbar.setChecked(True)
        self.actionNavigation_Toolbar = QAction(MainWindow)
        self.actionNavigation_Toolbar.setObjectName(u"actionNavigation_Toolbar")
        self.actionNavigation_Toolbar.setCheckable(True)
        self.actionNavigation_Toolbar.setChecked(True)
        self.actionOpenWith = QAction(MainWindow)
        self.actionOpenWith.setObjectName(u"actionOpenWith")
        self.actionOpenWith.setEnabled(False)
        icon26 = QIcon(QIcon.fromTheme(u"utilities-terminal"))
        self.actionOpenWith.setIcon(icon26)
        self.actionPreferences = QAction(MainWindow)
        self.actionPreferences.setObjectName(u"actionPreferences")
        icon27 = QIcon(QIcon.fromTheme(u"preferences-system"))
        self.actionPreferences.setIcon(icon27)
        self.actionPreferences.setMenuRole(QAction.PreferencesRole)
        self.actionFileInfo = QAction(MainWindow)
        self.actionFileInfo.setObjectName(u"actionFileInfo")
        self.actionFileInfo.setEnabled(False)
        icon28 = QIcon(QIcon.fromTheme(u"dialog-information"))
        self.actionFileInfo.setIcon(icon28)
        self.actionNewWindow = QAction(MainWindow)
        self.actionNewWindow.setObjectName(u"actionNewWindow")
        icon29 = QIcon(QIcon.fromTheme(u"window-new"))
        self.actionNewWindow.setIcon(icon29)
        self.actionFullScreen = QAction(MainWindow)
        self.actionFullScreen.setObjectName(u"actionFullScreen")
        self.actionFullScreen.setCheckable(True)
        icon30 = QIcon(QIcon.fromTheme(u"view-fullscreen"))
        self.actionFullScreen.setIcon(icon30)
        self.actionGoToLineNumber = QAction(MainWindow)
        self.actionGoToLineNumber.setObjectName(u"actionGoToLineNumber")
        self.actionUnindent = QAction(MainWindow)
        self.actionUnindent.setObjectName(u"actionUnindent")
        self.actionUnindent.setEnabled(False)
        icon31 = QIcon(QIcon.fromTheme(u"format-indent-less"))
        self.actionUnindent.setIcon(icon31)
        self.actionIndent = QAction(MainWindow)
        self.actionIndent.setObjectName(u"actionIndent")
        self.actionIndent.setEnabled(False)
        icon32 = QIcon(QIcon.fromTheme(u"format-indent-more"))
        self.actionIndent.setIcon(icon32)
        self.actionCommentOut = QAction(MainWindow)
        self.actionCommentOut.setObjectName(u"actionCommentOut")
        self.actionCommentOut.setEnabled(False)
        self.actionUncomment = QAction(MainWindow)
        self.actionUncomment.setObjectName(u"actionUncomment")
        self.actionUncomment.setEnabled(False)
        self.actionStop = QAction(MainWindow)
        self.actionStop.setObjectName(u"actionStop")
        self.actionStop.setEnabled(False)
        icon33 = QIcon(QIcon.fromTheme(u"process-stop"))
        self.actionStop.setIcon(icon33)
        self.actionPrint = QAction(MainWindow)
        self.actionPrint.setObjectName(u"actionPrint")
        icon34 = QIcon(QIcon.fromTheme(u"document-print"))
        self.actionPrint.setIcon(icon34)
        self.actionPrintPreview = QAction(MainWindow)
        self.actionPrintPreview.setObjectName(u"actionPrintPreview")
        icon35 = QIcon(QIcon.fromTheme(u"document-print-preview"))
        self.actionPrintPreview.setIcon(icon35)
        self.centralwidget = QWidget(MainWindow)
        self.centralwidget.setObjectName(u"centralwidget")
        self.verticalLayout = QVBoxLayout(self.centralwidget)
        self.verticalLayout.setSpacing(5)
        self.verticalLayout.setObjectName(u"verticalLayout")
        self.verticalLayout.setContentsMargins(5, 5, 5, 1)
        self.buttonNewTab = QPushButton(self.centralwidget)
        self.buttonNewTab.setObjectName(u"buttonNewTab")
        sizePolicy = QSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.buttonNewTab.sizePolicy().hasHeightForWidth())
        self.buttonNewTab.setSizePolicy(sizePolicy)
        self.buttonNewTab.setMaximumSize(QSize(24, 28))
        self.buttonNewTab.setFocusPolicy(Qt.NoFocus)
        self.buttonNewTab.setIcon(icon11)
        self.buttonNewTab.setIconSize(QSize(16, 16))
        self.buttonNewTab.setFlat(True)

        self.verticalLayout.addWidget(self.buttonNewTab)

        self.buttonGo = QToolButton(self.centralwidget)
        self.buttonGo.setObjectName(u"buttonGo")
        self.buttonGo.setEnabled(False)
        self.buttonGo.setFocusPolicy(Qt.NoFocus)
        icon36 = QIcon()
        iconThemeName = u"media-playback-start"
        if QIcon.hasThemeIcon(iconThemeName):
            icon36 = QIcon.fromTheme(iconThemeName)
        else:
            icon36.addFile(u"", QSize(), QIcon.Normal, QIcon.Off)
        
        self.buttonGo.setIcon(icon36)

        self.verticalLayout.addWidget(self.buttonGo)

        self.tabTopRightWidget = QWidget(self.centralwidget)
        self.tabTopRightWidget.setObjectName(u"tabTopRightWidget")
        sizePolicy.setHeightForWidth(self.tabTopRightWidget.sizePolicy().hasHeightForWidth())
        self.tabTopRightWidget.setSizePolicy(sizePolicy)
        self.tabTopRightLayout = QHBoxLayout(self.tabTopRightWidget)
        self.tabTopRightLayout.setSpacing(0)
        self.tabTopRightLayout.setContentsMargins(0, 0, 0, 0)
        self.tabTopRightLayout.setObjectName(u"tabTopRightLayout")
        self.buttonTabList = QPushButton(self.tabTopRightWidget)
        self.buttonTabList.setObjectName(u"buttonTabList")
        sizePolicy.setHeightForWidth(self.buttonTabList.sizePolicy().hasHeightForWidth())
        self.buttonTabList.setSizePolicy(sizePolicy)
        self.buttonTabList.setMaximumSize(QSize(24, 28))
        self.buttonTabList.setFocusPolicy(Qt.NoFocus)
        self.buttonTabList.setIconSize(QSize(10, 10))
        self.buttonTabList.setFlat(True)

        self.tabTopRightLayout.addWidget(self.buttonTabList)

        self.buttonClose = QPushButton(self.tabTopRightWidget)
        self.buttonClose.setObjectName(u"buttonClose")
        sizePolicy.setHeightForWidth(self.buttonClose.sizePolicy().hasHeightForWidth())
        self.buttonClose.setSizePolicy(sizePolicy)
        self.buttonClose.setMaximumSize(QSize(24, 28))
        self.buttonClose.setFocusPolicy(Qt.NoFocus)
        self.buttonClose.setIconSize(QSize(16, 16))
        self.buttonClose.setFlat(True)

        self.tabTopRightLayout.addWidget(self.buttonClose)


        self.verticalLayout.addWidget(self.tabTopRightWidget)

        self.mainWidget = QWidget(self.centralwidget)
        self.mainWidget.setObjectName(u"mainWidget")
        sizePolicy1 = QSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        sizePolicy1.setHorizontalStretch(0)
        sizePolicy1.setVerticalStretch(0)
        sizePolicy1.setHeightForWidth(self.mainWidget.sizePolicy().hasHeightForWidth())
        self.mainWidget.setSizePolicy(sizePolicy1)
        self.horizontalLayout_4 = QHBoxLayout(self.mainWidget)
        self.horizontalLayout_4.setSpacing(5)
        self.horizontalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_4.setObjectName(u"horizontalLayout_4")

        self.verticalLayout.addWidget(self.mainWidget)

        self.findWidget = QWidget(self.centralwidget)
        self.findWidget.setObjectName(u"findWidget")
        sizePolicy2 = QSizePolicy(QSizePolicy.Preferred, QSizePolicy.Fixed)
        sizePolicy2.setHorizontalStretch(0)
        sizePolicy2.setVerticalStretch(0)
        sizePolicy2.setHeightForWidth(self.findWidget.sizePolicy().hasHeightForWidth())
        self.findWidget.setSizePolicy(sizePolicy2)
        self.horizontalLayout_3 = QHBoxLayout(self.findWidget)
        self.horizontalLayout_3.setSpacing(5)
        self.horizontalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_3.setObjectName(u"horizontalLayout_3")
        self.buttonCloseFind = QToolButton(self.findWidget)
        self.buttonCloseFind.setObjectName(u"buttonCloseFind")
        self.buttonCloseFind.setFocusPolicy(Qt.NoFocus)
        icon37 = QIcon()
        iconThemeName = u"window-close"
        if QIcon.hasThemeIcon(iconThemeName):
            icon37 = QIcon.fromTheme(iconThemeName)
        else:
            icon37.addFile(u"", QSize(), QIcon.Normal, QIcon.Off)
        
        self.buttonCloseFind.setIcon(icon37)
        self.buttonCloseFind.setIconSize(QSize(16, 16))

        self.horizontalLayout_3.addWidget(self.buttonCloseFind)

        self.labelFind = QLabel(self.findWidget)
        self.labelFind.setObjectName(u"labelFind")
        sizePolicy3 = QSizePolicy(QSizePolicy.Fixed, QSizePolicy.Preferred)
        sizePolicy3.setHorizontalStretch(0)
        sizePolicy3.setVerticalStretch(0)
        sizePolicy3.setHeightForWidth(self.labelFind.sizePolicy().hasHeightForWidth())
        self.labelFind.setSizePolicy(sizePolicy3)

        self.horizontalLayout_3.addWidget(self.labelFind)

        self.findBar = QLineEdit(self.findWidget)
        self.findBar.setObjectName(u"findBar")
        sizePolicy.setHeightForWidth(self.findBar.sizePolicy().hasHeightForWidth())
        self.findBar.setSizePolicy(sizePolicy)

        self.horizontalLayout_3.addWidget(self.findBar)

        self.buttonFindPrev = QPushButton(self.findWidget)
        self.buttonFindPrev.setObjectName(u"buttonFindPrev")
        self.buttonFindPrev.setEnabled(False)
        sizePolicy.setHeightForWidth(self.buttonFindPrev.sizePolicy().hasHeightForWidth())
        self.buttonFindPrev.setSizePolicy(sizePolicy)
        self.buttonFindPrev.setIcon(icon4)
        self.buttonFindPrev.setIconSize(QSize(16, 16))

        self.horizontalLayout_3.addWidget(self.buttonFindPrev)

        self.buttonFindNext = QPushButton(self.findWidget)
        self.buttonFindNext.setObjectName(u"buttonFindNext")
        self.buttonFindNext.setEnabled(False)
        sizePolicy.setHeightForWidth(self.buttonFindNext.sizePolicy().hasHeightForWidth())
        self.buttonFindNext.setSizePolicy(sizePolicy)
        self.buttonFindNext.setIcon(icon5)
        self.buttonFindNext.setIconSize(QSize(16, 16))

        self.horizontalLayout_3.addWidget(self.buttonFindNext)

        self.buttonHighlightAll = QPushButton(self.findWidget)
        self.buttonHighlightAll.setObjectName(u"buttonHighlightAll")
        self.buttonHighlightAll.setEnabled(False)
        sizePolicy.setHeightForWidth(self.buttonHighlightAll.sizePolicy().hasHeightForWidth())
        self.buttonHighlightAll.setSizePolicy(sizePolicy)
        self.buttonHighlightAll.setIconSize(QSize(16, 16))
        self.buttonHighlightAll.setCheckable(True)

        self.horizontalLayout_3.addWidget(self.buttonHighlightAll)

        self.checkBoxMatchCase = QCheckBox(self.findWidget)
        self.checkBoxMatchCase.setObjectName(u"checkBoxMatchCase")
        sizePolicy.setHeightForWidth(self.checkBoxMatchCase.sizePolicy().hasHeightForWidth())
        self.checkBoxMatchCase.setSizePolicy(sizePolicy)

        self.horizontalLayout_3.addWidget(self.checkBoxMatchCase)

        self.labelFindPixmap = QLabel(self.findWidget)
        self.labelFindPixmap.setObjectName(u"labelFindPixmap")

        self.horizontalLayout_3.addWidget(self.labelFindPixmap)

        self.labelFindStatus = QLabel(self.findWidget)
        self.labelFindStatus.setObjectName(u"labelFindStatus")

        self.horizontalLayout_3.addWidget(self.labelFindStatus)

        self.horizontalSpacer = QSpacerItem(40, 20, QSizePolicy.Expanding, QSizePolicy.Minimum)

        self.horizontalLayout_3.addItem(self.horizontalSpacer)


        self.verticalLayout.addWidget(self.findWidget)

        self.breadcrumbWidget = QWidget(self.centralwidget)
        self.breadcrumbWidget.setObjectName(u"breadcrumbWidget")
        self.breadcrumbLayout = QHBoxLayout(self.breadcrumbWidget)
        self.breadcrumbLayout.setSpacing(5)
        self.breadcrumbLayout.setContentsMargins(0, 0, 0, 0)
        self.breadcrumbLayout.setObjectName(u"breadcrumbLayout")
        self.breadcrumb = QLabel(self.breadcrumbWidget)
        self.breadcrumb.setObjectName(u"breadcrumb")
        self.breadcrumb.setTextInteractionFlags(Qt.LinksAccessibleByMouse|Qt.TextSelectableByMouse)

        self.breadcrumbLayout.addWidget(self.breadcrumb)


        self.verticalLayout.addWidget(self.breadcrumbWidget)

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QMenuBar(MainWindow)
        self.menubar.setObjectName(u"menubar")
        self.menubar.setGeometry(QRect(0, 0, 910, 26))
        self.menuFile = QMenu(self.menubar)
        self.menuFile.setObjectName(u"menuFile")
        self.menuOpenRecent = QMenu(self.menuFile)
        self.menuOpenRecent.setObjectName(u"menuOpenRecent")
        self.menuOpenRecent.setEnabled(False)
        icon38 = QIcon()
        iconThemeName = u"document-open-recent"
        if QIcon.hasThemeIcon(iconThemeName):
            icon38 = QIcon.fromTheme(iconThemeName)
        else:
            icon38.addFile(u"", QSize(), QIcon.Normal, QIcon.Off)
        
        self.menuOpenRecent.setIcon(icon38)
        self.helpMenu = QMenu(self.menubar)
        self.helpMenu.setObjectName(u"helpMenu")
        self.menuEdit = QMenu(self.menubar)
        self.menuEdit.setObjectName(u"menuEdit")
        self.menuCommands = QMenu(self.menubar)
        self.menuCommands.setObjectName(u"menuCommands")
        self.menuView = QMenu(self.menubar)
        self.menuView.setObjectName(u"menuView")
        self.menuToolbars = QMenu(self.menuView)
        self.menuToolbars.setObjectName(u"menuToolbars")
        self.menuHistory = QMenu(self.menubar)
        self.menuHistory.setObjectName(u"menuHistory")
        self.menuRecentlyClosedTabs = QMenu(self.menuHistory)
        self.menuRecentlyClosedTabs.setObjectName(u"menuRecentlyClosedTabs")
        self.menuRecentlyClosedTabs.setEnabled(False)
        self.menuRecentlyClosedTabs.setIcon(icon38)
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QStatusBar(MainWindow)
        self.statusbar.setObjectName(u"statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.editToolbar = QToolBar(MainWindow)
        self.editToolbar.setObjectName(u"editToolbar")
        self.editToolbar.setMovable(False)
        MainWindow.addToolBar(Qt.TopToolBarArea, self.editToolbar)
        self.navToolbar = QToolBar(MainWindow)
        self.navToolbar.setObjectName(u"navToolbar")
        self.navToolbar.setMovable(False)
        MainWindow.addToolBar(Qt.TopToolBarArea, self.navToolbar)
        MainWindow.insertToolBarBreak(self.navToolbar)
#if QT_CONFIG(shortcut)
        self.labelFind.setBuddy(self.findBar)
#endif // QT_CONFIG(shortcut)

        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuEdit.menuAction())
        self.menubar.addAction(self.menuView.menuAction())
        self.menubar.addAction(self.menuHistory.menuAction())
        self.menubar.addAction(self.menuCommands.menuAction())
        self.menubar.addAction(self.helpMenu.menuAction())
        self.menuFile.addAction(self.actionNewWindow)
        self.menuFile.addAction(self.actionNewTab)
        self.menuFile.addAction(self.actionOpen)
        self.menuFile.addAction(self.menuOpenRecent.menuAction())
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionEdit)
        self.menuFile.addAction(self.actionBrowse)
        self.menuFile.addAction(self.actionSave)
        self.menuFile.addAction(self.actionSaveAs)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionPrintPreview)
        self.menuFile.addAction(self.actionPrint)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionCloseTab)
        self.menuFile.addAction(self.exitAction)
        self.helpMenu.addAction(self.documentationAction)
        self.helpMenu.addAction(self.aboutAction)
        self.helpMenu.addAction(self.aboutQtAction)
        self.menuEdit.addAction(self.actionUndo)
        self.menuEdit.addAction(self.actionRedo)
        self.menuEdit.addSeparator()
        self.menuEdit.addAction(self.actionCut)
        self.menuEdit.addAction(self.actionCopy)
        self.menuEdit.addAction(self.actionPaste)
        self.menuEdit.addSeparator()
        self.menuEdit.addAction(self.actionSelectAll)
        self.menuEdit.addSeparator()
        self.menuEdit.addAction(self.actionFind)
        self.menuEdit.addAction(self.actionFindPrev)
        self.menuEdit.addAction(self.actionFindNext)
        self.menuEdit.addAction(self.actionGoToLineNumber)
        self.menuEdit.addSeparator()
        self.menuEdit.addAction(self.actionPreferences)
        self.menuCommands.addAction(self.actionFileInfo)
        self.menuCommands.addAction(self.actionDiffFile)
        self.menuCommands.addSeparator()
        self.menuCommands.addAction(self.actionCommentOut)
        self.menuCommands.addAction(self.actionUncomment)
        self.menuCommands.addAction(self.actionIndent)
        self.menuCommands.addAction(self.actionUnindent)
        self.menuCommands.addSeparator()
        self.menuCommands.addAction(self.actionOpenWith)
        self.menuCommands.addAction(self.actionTextEditor)
        self.menuCommands.addAction(self.actionUsdView)
        self.menuView.addAction(self.menuToolbars.menuAction())
        self.menuView.addAction(self.actionIncludePanel)
        self.menuView.addSeparator()
        self.menuView.addAction(self.actionRefresh)
        self.menuView.addAction(self.actionStop)
        self.menuView.addSeparator()
        self.menuView.addAction(self.actionZoomIn)
        self.menuView.addAction(self.actionZoomOut)
        self.menuView.addAction(self.actionNormalSize)
        self.menuView.addSeparator()
        self.menuView.addAction(self.actionFullScreen)
        self.menuHistory.addAction(self.actionBack)
        self.menuHistory.addAction(self.actionForward)
        self.menuHistory.addSeparator()
        self.menuHistory.addSeparator()
        self.menuHistory.addAction(self.menuRecentlyClosedTabs.menuAction())
        self.editToolbar.addAction(self.actionNewTab)
        self.editToolbar.addAction(self.actionOpen)
        self.editToolbar.addAction(self.actionSave)
        self.editToolbar.addSeparator()
        self.editToolbar.addAction(self.actionUndo)
        self.editToolbar.addAction(self.actionRedo)
        self.editToolbar.addSeparator()
        self.editToolbar.addAction(self.actionCut)
        self.editToolbar.addAction(self.actionCopy)
        self.editToolbar.addAction(self.actionPaste)
        self.editToolbar.addSeparator()
        self.editToolbar.addAction(self.actionZoomIn)
        self.editToolbar.addAction(self.actionZoomOut)
        self.editToolbar.addAction(self.actionNormalSize)
        self.editToolbar.addSeparator()
        self.editToolbar.addAction(self.actionBrowse)
        self.editToolbar.addAction(self.actionEdit)
        self.navToolbar.addAction(self.actionBack)
        self.navToolbar.addAction(self.actionForward)
        self.navToolbar.addAction(self.actionRefresh)
        self.navToolbar.addAction(self.actionStop)

        self.retranslateUi(MainWindow)
        self.exitAction.triggered.connect(MainWindow.close)

        QMetaObject.connectSlotsByName(MainWindow)
    # setupUi

    def retranslateUi(self, MainWindow):
        MainWindow.setWindowTitle(QCoreApplication.translate("MainWindow", u"USD Manager", None))
        self.aboutAction.setText(QCoreApplication.translate("MainWindow", u"&About", None))
        self.exitAction.setText(QCoreApplication.translate("MainWindow", u"&Quit", None))
#if QT_CONFIG(shortcut)
        self.exitAction.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Q", None))
#endif // QT_CONFIG(shortcut)
        self.documentationAction.setText(QCoreApplication.translate("MainWindow", u"&Documentation", None))
#if QT_CONFIG(shortcut)
        self.documentationAction.setShortcut(QCoreApplication.translate("MainWindow", u"F1", None))
#endif // QT_CONFIG(shortcut)
        self.actionBack.setText(QCoreApplication.translate("MainWindow", u"&Back", None))
#if QT_CONFIG(shortcut)
        self.actionBack.setShortcut(QCoreApplication.translate("MainWindow", u"Alt+Left", None))
#endif // QT_CONFIG(shortcut)
        self.actionForward.setText(QCoreApplication.translate("MainWindow", u"&Forward", None))
#if QT_CONFIG(shortcut)
        self.actionForward.setShortcut(QCoreApplication.translate("MainWindow", u"Alt+Right", None))
#endif // QT_CONFIG(shortcut)
        self.actionOpen.setText(QCoreApplication.translate("MainWindow", u"&Open...", None))
#if QT_CONFIG(shortcut)
        self.actionOpen.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+O", None))
#endif // QT_CONFIG(shortcut)
        self.actionEdit.setText(QCoreApplication.translate("MainWindow", u"&Edit File", None))
#if QT_CONFIG(statustip)
        self.actionEdit.setStatusTip(QCoreApplication.translate("MainWindow", u"Switch to edit mode", None))
#endif // QT_CONFIG(statustip)
#if QT_CONFIG(shortcut)
        self.actionEdit.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+E", None))
#endif // QT_CONFIG(shortcut)
        self.actionCloseTab.setText(QCoreApplication.translate("MainWindow", u"&Close Tab", None))
#if QT_CONFIG(shortcut)
        self.actionCloseTab.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+W", None))
#endif // QT_CONFIG(shortcut)
        self.actionFind.setText(QCoreApplication.translate("MainWindow", u"&Find...", None))
#if QT_CONFIG(shortcut)
        self.actionFind.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Shift+F", None))
#endif // QT_CONFIG(shortcut)
        self.actionFindPrev.setText(QCoreApplication.translate("MainWindow", u"Find Previous", None))
#if QT_CONFIG(shortcut)
        self.actionFindPrev.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Shift+G", None))
#endif // QT_CONFIG(shortcut)
        self.actionFindNext.setText(QCoreApplication.translate("MainWindow", u"Find Next", None))
#if QT_CONFIG(shortcut)
        self.actionFindNext.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+G", None))
#endif // QT_CONFIG(shortcut)
        self.actionOpen_files_in_new_tabs.setText(QCoreApplication.translate("MainWindow", u"Open files in new tabs", None))
        self.actionNewTab.setText(QCoreApplication.translate("MainWindow", u"New &Tab", None))
#if QT_CONFIG(shortcut)
        self.actionNewTab.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+T", None))
#endif // QT_CONFIG(shortcut)
        self.actionSave.setText(QCoreApplication.translate("MainWindow", u"&Save", None))
#if QT_CONFIG(shortcut)
        self.actionSave.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+S", None))
#endif // QT_CONFIG(shortcut)
        self.actionSaveAs.setText(QCoreApplication.translate("MainWindow", u"Save &As...", None))
#if QT_CONFIG(shortcut)
        self.actionSaveAs.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Shift+S", None))
#endif // QT_CONFIG(shortcut)
        self.actionDiffFile.setText(QCoreApplication.translate("MainWindow", u"&Diff File...", None))
#if QT_CONFIG(statustip)
        self.actionDiffFile.setStatusTip(QCoreApplication.translate("MainWindow", u"Diff your changes with the currently saved file", None))
#endif // QT_CONFIG(statustip)
        self.actionUndo.setText(QCoreApplication.translate("MainWindow", u"&Undo", None))
#if QT_CONFIG(shortcut)
        self.actionUndo.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Z", None))
#endif // QT_CONFIG(shortcut)
        self.actionRedo.setText(QCoreApplication.translate("MainWindow", u"&Redo", None))
#if QT_CONFIG(shortcut)
        self.actionRedo.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Shift+Z", None))
#endif // QT_CONFIG(shortcut)
        self.actionCut.setText(QCoreApplication.translate("MainWindow", u"Cu&t", None))
#if QT_CONFIG(shortcut)
        self.actionCut.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+X", None))
#endif // QT_CONFIG(shortcut)
        self.actionCopy.setText(QCoreApplication.translate("MainWindow", u"&Copy", None))
#if QT_CONFIG(shortcut)
        self.actionCopy.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+C", None))
#endif // QT_CONFIG(shortcut)
        self.actionPaste.setText(QCoreApplication.translate("MainWindow", u"&Paste", None))
#if QT_CONFIG(shortcut)
        self.actionPaste.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+V", None))
#endif // QT_CONFIG(shortcut)
        self.actionSelectAll.setText(QCoreApplication.translate("MainWindow", u"Select &All", None))
#if QT_CONFIG(shortcut)
        self.actionSelectAll.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+A", None))
#endif // QT_CONFIG(shortcut)
        self.actionIncludePanel.setText(QCoreApplication.translate("MainWindow", u"F&ile Browser", None))
#if QT_CONFIG(shortcut)
        self.actionIncludePanel.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+I", None))
#endif // QT_CONFIG(shortcut)
        self.actionRefresh.setText(QCoreApplication.translate("MainWindow", u"&Reload", None))
#if QT_CONFIG(tooltip)
        self.actionRefresh.setToolTip(QCoreApplication.translate("MainWindow", u"Reload current file", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(shortcut)
        self.actionRefresh.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+R", None))
#endif // QT_CONFIG(shortcut)
        self.actionZoomIn.setText(QCoreApplication.translate("MainWindow", u"&Zoom In", None))
#if QT_CONFIG(shortcut)
        self.actionZoomIn.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl++", None))
#endif // QT_CONFIG(shortcut)
        self.actionZoomOut.setText(QCoreApplication.translate("MainWindow", u"Zoom &Out", None))
#if QT_CONFIG(shortcut)
        self.actionZoomOut.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+-", None))
#endif // QT_CONFIG(shortcut)
        self.actionNormalSize.setText(QCoreApplication.translate("MainWindow", u"&Normal Size", None))
#if QT_CONFIG(shortcut)
        self.actionNormalSize.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+0", None))
#endif // QT_CONFIG(shortcut)
        self.actionPreferences_NewTab.setText(QCoreApplication.translate("MainWindow", u"Open files in new tabs", None))
        self.actionUsdView.setText(QCoreApplication.translate("MainWindow", u"Open with usd&view...", None))
        self.actionTextEditor.setText(QCoreApplication.translate("MainWindow", u"Open with &text editor...", None))
        self.aboutQtAction.setText(QCoreApplication.translate("MainWindow", u"About &Qt", None))
        self.actionBrowse.setText(QCoreApplication.translate("MainWindow", u"&Browse Mode", None))
#if QT_CONFIG(statustip)
        self.actionBrowse.setStatusTip(QCoreApplication.translate("MainWindow", u"Switch to browse mode", None))
#endif // QT_CONFIG(statustip)
#if QT_CONFIG(shortcut)
        self.actionBrowse.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+E", None))
#endif // QT_CONFIG(shortcut)
        self.actionPreferences_SyntaxHighlighting.setText(QCoreApplication.translate("MainWindow", u"Syntax highlighting", None))
        self.actionStandard_Toolbar.setText(QCoreApplication.translate("MainWindow", u"Standard Toolbar", None))
        self.actionNavigation_Toolbar.setText(QCoreApplication.translate("MainWindow", u"Navigation Toolbar", None))
        self.actionOpenWith.setText(QCoreApplication.translate("MainWindow", u"&Open with...", None))
#if QT_CONFIG(shortcut)
        self.actionOpenWith.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Shift+O", None))
#endif // QT_CONFIG(shortcut)
        self.actionPreferences.setText(QCoreApplication.translate("MainWindow", u"Prefere&nces...", None))
        self.actionFileInfo.setText(QCoreApplication.translate("MainWindow", u"&File Info...", None))
#if QT_CONFIG(tooltip)
        self.actionFileInfo.setToolTip(QCoreApplication.translate("MainWindow", u"File Information", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.actionFileInfo.setStatusTip(QCoreApplication.translate("MainWindow", u"Display file information including owner and modified time", None))
#endif // QT_CONFIG(statustip)
#if QT_CONFIG(shortcut)
        self.actionFileInfo.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Shift+I", None))
#endif // QT_CONFIG(shortcut)
        self.actionNewWindow.setText(QCoreApplication.translate("MainWindow", u"&New Window", None))
#if QT_CONFIG(shortcut)
        self.actionNewWindow.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+N", None))
#endif // QT_CONFIG(shortcut)
        self.actionFullScreen.setText(QCoreApplication.translate("MainWindow", u"&Full Screen", None))
#if QT_CONFIG(shortcut)
        self.actionFullScreen.setShortcut(QCoreApplication.translate("MainWindow", u"F11", None))
#endif // QT_CONFIG(shortcut)
        self.actionGoToLineNumber.setText(QCoreApplication.translate("MainWindow", u"&Go To Line Number...", None))
#if QT_CONFIG(shortcut)
        self.actionGoToLineNumber.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Shift+L", None))
#endif // QT_CONFIG(shortcut)
        self.actionUnindent.setText(QCoreApplication.translate("MainWindow", u"U&nindent", None))
#if QT_CONFIG(tooltip)
        self.actionUnindent.setToolTip(QCoreApplication.translate("MainWindow", u"Unindent selected lines", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.actionUnindent.setStatusTip(QCoreApplication.translate("MainWindow", u"Unindent selected lines", None))
#endif // QT_CONFIG(statustip)
#if QT_CONFIG(shortcut)
        self.actionUnindent.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Shift+9", None))
#endif // QT_CONFIG(shortcut)
        self.actionIndent.setText(QCoreApplication.translate("MainWindow", u"&Indent", None))
#if QT_CONFIG(tooltip)
        self.actionIndent.setToolTip(QCoreApplication.translate("MainWindow", u"Indent selected lines", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.actionIndent.setStatusTip(QCoreApplication.translate("MainWindow", u"Indent selected lines", None))
#endif // QT_CONFIG(statustip)
#if QT_CONFIG(shortcut)
        self.actionIndent.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Shift+0", None))
#endif // QT_CONFIG(shortcut)
        self.actionCommentOut.setText(QCoreApplication.translate("MainWindow", u"&Comment Out", None))
#if QT_CONFIG(tooltip)
        self.actionCommentOut.setToolTip(QCoreApplication.translate("MainWindow", u"Comment out selected lines", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.actionCommentOut.setStatusTip(QCoreApplication.translate("MainWindow", u"Comment out selected lines", None))
#endif // QT_CONFIG(statustip)
#if QT_CONFIG(shortcut)
        self.actionCommentOut.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Shift+3", None))
#endif // QT_CONFIG(shortcut)
        self.actionUncomment.setText(QCoreApplication.translate("MainWindow", u"&Uncomment", None))
#if QT_CONFIG(tooltip)
        self.actionUncomment.setToolTip(QCoreApplication.translate("MainWindow", u"Uncomment selected lines", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.actionUncomment.setStatusTip(QCoreApplication.translate("MainWindow", u"Uncomment selected lines", None))
#endif // QT_CONFIG(statustip)
#if QT_CONFIG(shortcut)
        self.actionUncomment.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+3", None))
#endif // QT_CONFIG(shortcut)
        self.actionStop.setText(QCoreApplication.translate("MainWindow", u"&Stop", None))
#if QT_CONFIG(tooltip)
        self.actionStop.setToolTip(QCoreApplication.translate("MainWindow", u"Stop loading current file", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(shortcut)
        self.actionStop.setShortcut(QCoreApplication.translate("MainWindow", u"Esc", None))
#endif // QT_CONFIG(shortcut)
        self.actionPrint.setText(QCoreApplication.translate("MainWindow", u"&Print...", None))
#if QT_CONFIG(shortcut)
        self.actionPrint.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+P", None))
#endif // QT_CONFIG(shortcut)
        self.actionPrintPreview.setText(QCoreApplication.translate("MainWindow", u"Print Pre&view...", None))
#if QT_CONFIG(tooltip)
        self.buttonNewTab.setToolTip(QCoreApplication.translate("MainWindow", u"New tab", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(tooltip)
        self.buttonGo.setToolTip(QCoreApplication.translate("MainWindow", u"Go", None))
#endif // QT_CONFIG(tooltip)
        self.buttonGo.setText(QCoreApplication.translate("MainWindow", u"Go", None))
#if QT_CONFIG(tooltip)
        self.buttonTabList.setToolTip(QCoreApplication.translate("MainWindow", u"List all tabs", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(tooltip)
        self.buttonClose.setToolTip(QCoreApplication.translate("MainWindow", u"Close current tab", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(tooltip)
        self.buttonCloseFind.setToolTip(QCoreApplication.translate("MainWindow", u"Close find bar", None))
#endif // QT_CONFIG(tooltip)
        self.labelFind.setText(QCoreApplication.translate("MainWindow", u"Find:", None))
#if QT_CONFIG(tooltip)
        self.buttonFindPrev.setToolTip(QCoreApplication.translate("MainWindow", u"Find previous occurrence", None))
#endif // QT_CONFIG(tooltip)
        self.buttonFindPrev.setText(QCoreApplication.translate("MainWindow", u"Previous", None))
#if QT_CONFIG(tooltip)
        self.buttonFindNext.setToolTip(QCoreApplication.translate("MainWindow", u"Find next occurrence", None))
#endif // QT_CONFIG(tooltip)
        self.buttonFindNext.setText(QCoreApplication.translate("MainWindow", u"Next", None))
#if QT_CONFIG(tooltip)
        self.buttonHighlightAll.setToolTip(QCoreApplication.translate("MainWindow", u"Highlight all occurrences", None))
#endif // QT_CONFIG(tooltip)
        self.buttonHighlightAll.setText(QCoreApplication.translate("MainWindow", u"Highlight All", None))
        self.checkBoxMatchCase.setText(QCoreApplication.translate("MainWindow", u"Case sensitive", None))
        self.menuFile.setTitle(QCoreApplication.translate("MainWindow", u"&File", None))
        self.menuOpenRecent.setTitle(QCoreApplication.translate("MainWindow", u"Open &Recent", None))
        self.helpMenu.setTitle(QCoreApplication.translate("MainWindow", u"&Help", None))
        self.menuEdit.setTitle(QCoreApplication.translate("MainWindow", u"&Edit", None))
        self.menuCommands.setTitle(QCoreApplication.translate("MainWindow", u"&Commands", None))
        self.menuView.setTitle(QCoreApplication.translate("MainWindow", u"&View", None))
        self.menuToolbars.setTitle(QCoreApplication.translate("MainWindow", u"&Toolbars", None))
        self.menuHistory.setTitle(QCoreApplication.translate("MainWindow", u"Hi&story", None))
        self.menuRecentlyClosedTabs.setTitle(QCoreApplication.translate("MainWindow", u"&Recently Closed Tabs", None))
        self.editToolbar.setWindowTitle(QCoreApplication.translate("MainWindow", u"Standard Toolbar", None))
        self.navToolbar.setWindowTitle(QCoreApplication.translate("MainWindow", u"Navigation Toolbar", None))
    # retranslateUi

